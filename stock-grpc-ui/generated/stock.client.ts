// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "stock.proto" (package "stock", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { StockService } from "./stock";
import type { StockStreamRequest } from "./stock";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StockPriceResponse } from "./stock";
import type { StockPriceRequest } from "./stock";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service stock.StockService
 */
export interface IStockServiceClient {
    /**
     * @generated from protobuf rpc: GetPrice(stock.StockPriceRequest) returns (stock.StockPriceResponse);
     */
    getPrice(input: StockPriceRequest, options?: RpcOptions): UnaryCall<StockPriceRequest, StockPriceResponse>;
    /**
     * Bi-directional streaming for stock price updates
     *
     * @generated from protobuf rpc: PriceStream(stream stock.StockStreamRequest) returns (stream stock.StockPriceResponse);
     */
    priceStream(options?: RpcOptions): DuplexStreamingCall<StockStreamRequest, StockPriceResponse>;
}
/**
 * @generated from protobuf service stock.StockService
 */
export class StockServiceClient implements IStockServiceClient, ServiceInfo {
    typeName = StockService.typeName;
    methods = StockService.methods;
    options = StockService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetPrice(stock.StockPriceRequest) returns (stock.StockPriceResponse);
     */
    getPrice(input: StockPriceRequest, options?: RpcOptions): UnaryCall<StockPriceRequest, StockPriceResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StockPriceRequest, StockPriceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Bi-directional streaming for stock price updates
     *
     * @generated from protobuf rpc: PriceStream(stream stock.StockStreamRequest) returns (stream stock.StockPriceResponse);
     */
    priceStream(options?: RpcOptions): DuplexStreamingCall<StockStreamRequest, StockPriceResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StockStreamRequest, StockPriceResponse>("duplex", this._transport, method, opt);
    }
}
